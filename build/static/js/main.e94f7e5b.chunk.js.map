{"version":3,"sources":["components/Die/die.js","components/main/index.js","App.js","index.js"],"names":["Die","face","rolling","className","DiceGame","sides","override","css","useState","kit","setKit","dBGContract","setDGBContract","cUSDContract","setCUSDContract","prediction","setPrediction","cUSDStake","setCUSDStake","cUSDBalance","setCUSDBalance","notification","setNotification","die","side","dieState","setDieState","useEffect","a","displayNotification","connectCeloWallet","getBalance","InitWalletAndBalance","DBGContractAddress","_text","notificationOff","rollDie","prevState","approve","methods","playGame","BigNumber","shiftedBy","toString","send","from","defaultAccount","amount","result","window","celo","enable","web3","Web3","mKit","newKitFromWeb3","eth","getAccounts","accounts","contract","Contract","DiceBettingGame","once","fromBlock","toBlock","error","event","newDie","parseInt","returnValues","dieRollValue","score","Object","values","keys","userGuess","erc20Abi","getTotalBalance","totalBalance","cUSD","toFixed","id","role","color","loading","size","String","type","value","onChange","e","target","onClick","disabled","defaultProps","one","two","three","four","five","six","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"+hHASeA,EANH,SAAC,GAAqB,IAApBC,EAAmB,EAAnBA,KAAMC,EAAa,EAAbA,QAChB,OACC,mBAAGC,UAAS,0BAAqBF,EAArB,YAA6BC,GAAW,c,6CCMnDE,EAAW,SAAC,GAAe,IAAbC,EAAY,EAAZA,MAEZC,EAAWC,cAAH,oGAFgB,EASRC,qBATQ,mBASvBC,EATuB,KASlBC,EATkB,OAUQF,qBAVR,mBAUvBG,EAVuB,KAUVC,EAVU,OAWUJ,qBAXV,mBAWvBK,EAXuB,KAWTC,EAXS,OAaMN,mBAAS,GAbf,mBAavBO,EAbuB,KAaXC,EAbW,OAcIR,mBAAS,IAdb,mBAcvBS,EAduB,KAcZC,EAdY,OAeQV,qBAfR,mBAevBW,EAfuB,KAeVC,EAfU,OAgBUZ,qBAhBV,mBAgBvBa,EAhBuB,KAgBTC,EAhBS,OAiBEd,mBAAS,CACvCe,IAAK,MACLrB,SAAS,EACTsB,KAAM,IApBsB,mBAiBvBC,EAjBuB,KAiBbC,EAjBa,KAuB9BC,qBAAU,WAAM,4CACd,sBAAAC,EAAA,6DAEEC,GAAoB,qBAFtB,SAGQC,KAHR,uBAIQC,KAJR,4CADc,uBAAC,WAAD,wBAOdC,KACC,CAACb,IAGJ,IACMc,EAAqB,6CAGnBV,EAAuBE,EAAvBF,IAAKrB,EAAkBuB,EAAlBvB,QAASsB,GAASC,EAATD,KAChBK,GAAsB,SAACK,GAC3BZ,EAAgBY,IAEZC,GAAkB,SAACD,GACvBZ,KAGIc,GAAO,uCAAG,sBAAAR,EAAA,yDAERX,EAAY,EAFJ,yCAGLY,GAAoB,sCAHf,YAMVd,GAAc,GAAKA,EAAa,GANtB,yCAOLc,GAAoB,2CAPf,cASdA,GAAoB,0CATN,SAWZH,GAAY,SAACW,GAAD,mBAAC,eAAoBA,GAArB,IAAgCnC,SAAS,OAXzC,SAcNoC,GAAQrB,GAdF,cAeZY,GAAoB,oCAAD,OACcZ,EADd,gBAInBS,GAAY,SAACW,GAAD,mBAAC,eAAoBA,GAArB,IAAgCnC,SAAS,OAnBzC,UAsBNS,EAAY4B,QACfC,SACCzB,EACA,IAAI0B,IAAUxB,GAAWyB,UArCV,IAqCoCC,YAEpDC,KAAK,CAAEC,KAAMpC,EAAIqC,iBA3BR,QA8BZf,KA9BY,kDAgCZF,GAAoB,gBAAD,kBAhCP,QAkCdH,GAAY,SAACW,GAAD,mBAAC,eAAoBA,GAArB,IAAgCnC,SAAS,OAlCvC,0DAAH,qDAoCPoC,GAAO,uCAAG,WAAOS,GAAP,eAAAnB,EAAA,sEAEOf,EAAa0B,QAC/BD,QACCL,EACA,IAAIQ,IAAUM,GAAQL,UArDL,IAqD+BC,YAEjDC,KAAK,CAAEC,KAAMpC,EAAIqC,iBAPN,cAERE,EAFQ,yBAQPA,GARO,2CAAH,sDAWPlB,GAAiB,uCAAG,kCAAAF,EAAA,0DACpBqB,OAAOC,KADa,wBAEtBrB,GAAoB,oDAFE,kBAIdoB,OAAOC,KAAKC,SAJE,cAKpBhB,KAEMiB,EAAO,IAAIC,IAAKJ,OAAOC,MACzBI,EAAOC,yBAAeH,GARN,UAUGE,EAAKF,KAAKI,IAAIC,cAVjB,QAUdC,EAVc,OAWpBJ,EAAKR,eAAiBY,EAAS,GAC/BhD,EAAO4C,GAGHK,EAAW,IAAIlD,EAAI2C,KAAKI,IAAII,SAC9BC,EACA5B,GAGFrB,EAAe+C,GAEfA,EAASG,KACP,OACA,GACA,CACEC,UAAW,QACXC,QAAS,WAEX,SAAUC,EAAOC,GAEf,IAAMC,EAAS9D,EAAM+D,SAASF,EAAMG,aAAaC,eAC3CC,EAAQC,OAAOC,OAAON,GAC5BzC,EAAY,CACVH,IAAKiD,OAAOE,KAAKP,GACjBjE,SAAS,EACTsB,KAAM+C,EAAM,KAKZL,EAAMG,aAAaM,YAAcT,EAAMG,aAAaC,aAEpDzC,GAAoB,iDAAD,OACkC,EAAZZ,EADtB,WAInBY,GAAoB,mDAAD,OACwBZ,EADxB,cAQzBH,EACE,IAAIL,EAAI2C,KAAKI,IAAII,SAASgB,EAjHN,+CAyDF,kDA4DpB/C,GAAoB,gBAAD,kBA5DC,gCA+DtBA,GAAoB,wDA/DE,0DAAH,qDAkEjBE,GAAU,uCAAG,oCAAAH,EAAA,6DACjBC,GAAoB,qBADH,SAEXoB,OAAOC,KAAKC,SAFD,cAIXC,EAAO,IAAIC,IAAKJ,OAAOC,MACzBI,EAAOC,yBAAeH,GALT,SAMME,EAAKF,KAAKI,IAAIC,cANpB,cAMXC,EANW,iBAQUJ,EAAKuB,gBAAgBnB,EAAS,IARxC,QAQXoB,EARW,OASX3D,EAAc2D,EAAaC,KAAKrC,WAtIjB,IAsI4CsC,QAAQ,GACzE5D,EAAeD,GACfgB,KAXiB,4CAAH,qDAchB,OACE,qBAAKhC,UAAU,OAAf,SACE,sBAAKA,UAAU,iBAAf,UACE,qBAAKA,UAAU,+BAAf,SACE,sBAAKA,UAAU,kBAAf,UACE,sBAAMA,UAAU,8BAAhB,+BAGA,uBAAMA,UAAU,kDAAhB,UACE,sBAAM8E,GAAG,UAAT,0BAAuB9D,QAAvB,IAAuBA,IAAe,EAAtC,OADF,eAMHE,GACC,qBAAKlB,UAAU,sCAAsC+E,KAAK,QAA1D,SACE,sBAAMD,GAAG,eAAT,SAAyB5D,MAI5BF,EACC,sBAAKhB,UAAU,YAAf,UACE,qBAAKA,UAAU,YAAf,SACE,mDACoB,+BAAOqB,UAG5BtB,EACC,cAAC,IAAD,CACEiF,MAAM,QACNC,SAAS,EACTjF,UAAU,SACVI,IAAKD,EACL+E,KAAM,MAGR,cAAC,EAAD,CAAKpF,KAAMqF,OAAO/D,GAAMrB,QAASA,IAEnC,sBAAKC,UAAU,eAAf,UACE,gCACE,iDACA,uBACEoF,KAAK,SACLC,MAAOzE,EACP0E,SAAU,SAACC,GAAD,OAAO1E,GAAe0E,EAAEC,OAAOH,aAG7C,gCACE,4CACA,uBACED,KAAK,SACLC,MAAOvE,EACPwE,SAAU,SAACC,GAAD,OAAOxE,GAAcwE,EAAEC,OAAOH,gBAI9C,wBAAQI,QAASxD,GAASyD,SAAU3F,EAApC,SACGA,EAAU,MAAQ,kBAIvB,wBACC,UAMXE,EAAS0F,aAAe,CACtBzF,MAAO,CACL,CAAE0F,IAAK,GACP,CAAEC,IAAK,GACP,CAAEC,MAAO,GACT,CAAEC,KAAM,GACR,CAAEC,KAAM,GACR,CAAEC,IAAK,KAIIhG,Q,OC9PAiG,MANf,WACE,OACI,cAAC,EAAD,KCDNC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.e94f7e5b.chunk.js","sourcesContent":["import React from 'react'\nimport \"./die.css\"\n\nconst Die = ({face, rolling}) => {\n    return (\n     <i className={`die fas fa-dice-${face} ${rolling && \"shaking\"}`}></i>\n    )\n}\n\nexport default Die\n","import React, { useEffect, useState } from \"react\";\nimport Web3 from \"web3\";\nimport { newKitFromWeb3 } from \"@celo/contractkit\";\nimport BigNumber from \"bignumber.js\";\nimport \"./styles.css\";\nimport Die from \"../Die/die\";\nimport DiceBettingGame from \"../../contracts/abis/DiceBettingGame.abi.json\";\nimport erc20Abi from \"../../contracts/abis/erc20.abi.json\";\nimport FadeLoader from \"react-spinners/FadeLoader\";\nimport { css } from \"@emotion/react\";\n\nconst DiceGame = ({ sides }) => {\n  // loader css\n  const override = css`\n    display: block;\n    margin: auto;\n    /* border-color: red; */\n  `;\n\n  // states\n  const [kit, setKit] = useState();\n  const [dBGContract, setDGBContract] = useState();\n  const [cUSDContract, setCUSDContract] = useState();\n\n  const [prediction, setPrediction] = useState(1); //your prediction\n  const [cUSDStake, setCUSDStake] = useState(0.5);\n  const [cUSDBalance, setCUSDBalance] = useState();\n  const [notification, setNotification] = useState();\n  const [dieState, setDieState] = useState({\n    die: \"six\",\n    rolling: false,\n    side: 6,\n  });\n\n  useEffect(() => {\n    async function InitWalletAndBalance() {\n      // initialize wallet details\n      displayNotification(\"‚åõ Loading...\");\n      await connectCeloWallet();\n      await getBalance();\n    }\n    InitWalletAndBalance();\n  }, [cUSDBalance]);\n\n  // constants\n  const ERC20_DECIMALS = 18;\n  const DBGContractAddress = \"0x727ed4FcB209C99826F7889986AB9Ce2be63bEF5\";\n  const cUSDContractAddress = \"0x874069Fa1Eb16D44d622F2e0Ca25eeA172369bC1\";\n\n  const { die, rolling, side } = dieState;\n  const displayNotification = (_text) => {\n    setNotification(_text);\n  };\n  const notificationOff = (_text) => {\n    setNotification();\n  };\n\n  const rollDie = async () => {\n    // stake has to be greater than 0 usd\n    if (!(cUSDStake > 0)) {\n      return displayNotification(\"‚ö†Ô∏è Invalid Stake amount\");\n    }\n    // prediction is between 1 and 6\n    if (prediction <= 0 || prediction > 6) {\n      return displayNotification(\"‚ö†Ô∏è Guess Range is from 1 ~ 6\");\n    }\n    displayNotification(\"‚åõ Waiting for payment approval...\");\n    try {\n      setDieState((prevState) => ({ ...prevState, rolling: true }));\n\n      // approve transaction first\n      await approve(cUSDStake);\n      displayNotification(\n        `‚åõ Awaiting payment for your ${cUSDStake} cUSD Stake`\n      );\n\n      setDieState((prevState) => ({ ...prevState, rolling: true }));\n\n      // play game\n      await dBGContract.methods\n        .playGame(\n          prediction,\n          new BigNumber(cUSDStake).shiftedBy(ERC20_DECIMALS).toString()\n        )\n        .send({ from: kit.defaultAccount });\n\n      // fetch new balance\n      getBalance();\n    } catch (error) {\n      displayNotification(`‚ö†Ô∏è ${error}.`);\n    }\n    setDieState((prevState) => ({ ...prevState, rolling: false }));\n  };\n  const approve = async (amount) => {\n    //  allow contract to spend amount cusd\n    const result = await cUSDContract.methods\n      .approve(\n        DBGContractAddress,\n        new BigNumber(amount).shiftedBy(ERC20_DECIMALS).toString()\n      )\n      .send({ from: kit.defaultAccount });\n    return result;\n  };\n\n  const connectCeloWallet = async function () {\n    if (window.celo) {\n      displayNotification(\"‚ö†Ô∏è Please approve this DApp to use it.\");\n      try {\n        await window.celo.enable();\n        notificationOff();\n\n        const web3 = new Web3(window.celo);\n        let mKit = newKitFromWeb3(web3);\n\n        const accounts = await mKit.web3.eth.getAccounts();\n        mKit.defaultAccount = accounts[0];\n        setKit(mKit);\n\n        // set Dice game contract\n        let contract = new kit.web3.eth.Contract(\n          DiceBettingGame,\n          DBGContractAddress\n        );\n\n        setDGBContract(contract);\n        // Listen for the Game Event\n        contract.once(\n          \"Game\",\n          {},\n          {\n            fromBlock: 6523028,\n            toBlock: \"latest\",\n          },\n          function (error, event) {\n            // update dice values\n            const newDie = sides[parseInt(event.returnValues.dieRollValue)];\n            const score = Object.values(newDie);\n            setDieState({\n              die: Object.keys(newDie),\n              rolling: false,\n              side: score[0],\n            });\n\n            // display notification\n            if (\n              event.returnValues.userGuess === event.returnValues.dieRollValue\n            ) {\n              displayNotification(\n                `üéâ You got it right!!! you have won ${cUSDStake * 2} cUSD.`\n              );\n            } else {\n              displayNotification(\n                `‚ö†Ô∏è oops! you got it wrong!!! you lost ${cUSDStake} cUSD.`\n              );\n            }\n          }\n        );\n\n        // set cusd contract\n        setCUSDContract(\n          new kit.web3.eth.Contract(erc20Abi, cUSDContractAddress)\n        );\n        // set celo kit\n      } catch (error) {\n        displayNotification(`‚ö†Ô∏è ${error}.`);\n      }\n    } else {\n      displayNotification(\"‚ö†Ô∏è Please install the CeloExtensionWallet.\");\n    }\n  };\n  const getBalance = async function () {\n    displayNotification(\"‚åõ Loading...\");\n    await window.celo.enable();\n\n    const web3 = new Web3(window.celo);\n    let mKit = newKitFromWeb3(web3);\n    const accounts = await mKit.web3.eth.getAccounts();\n\n    const totalBalance = await mKit.getTotalBalance(accounts[0]);\n    const cUSDBalance = totalBalance.cUSD.shiftedBy(-ERC20_DECIMALS).toFixed(2);\n    setCUSDBalance(cUSDBalance);\n    notificationOff();\n  };\n\n  return (\n    <div className=\"hero\">\n      <div className=\"container mt-2\">\n        <nav className=\"navbar bg-white navbar-light\">\n          <div className=\"container-fluid\">\n            <span className=\"navbar-brand m-0 h4 fw-bold\">\n              Dice Betting Game\n            </span>\n            <span className=\"nav-link border rounded-pill bg-light text-dark\">\n              <span id=\"balance\">{`${cUSDBalance ?? 0} `}</span>\n              cUSD\n            </span>\n          </div>\n        </nav>\n        {notification && (\n          <div className=\"alert alert-warning sticky-top mt-2\" role=\"alert\">\n            <span id=\"notification\">{notification}</span>\n          </div>\n        )}\n        {/* Only show main game component when balance is successfuly fetched */}\n        {cUSDBalance ? (\n          <div className=\"container\">\n            <div className=\"randomNum\">\n              <p>\n                Dice Roll Output: <span>{side}</span>\n              </p>\n            </div>\n            {rolling ? (\n              <FadeLoader\n                color=\"green\"\n                loading={true}\n                className=\"loader\"\n                css={override}\n                size={150}\n              />\n            ) : (\n              <Die face={String(die)} rolling={rolling} />\n            )}\n            <div className=\"numContainer\">\n              <div>\n                <p>Your Prediction:</p>\n                <input\n                  type=\"number\"\n                  value={prediction}\n                  onChange={(e) => setPrediction(+e.target.value)}\n                />\n              </div>\n              <div>\n                <p>cUSD stake:</p>\n                <input\n                  type=\"number\"\n                  value={cUSDStake}\n                  onChange={(e) => setCUSDStake(+e.target.value)}\n                />\n              </div>\n            </div>\n            <button onClick={rollDie} disabled={rolling}>\n              {rolling ? \"...\" : \"Place Bet \"}\n            </button>\n          </div>\n        ) : (\n          <div></div>\n        )}{\" \"}\n      </div>\n    </div>\n  );\n};\n\nDiceGame.defaultProps = {\n  sides: [\n    { one: 1 },\n    { two: 2 },\n    { three: 3 },\n    { four: 4 },\n    { five: 5 },\n    { six: 6 },\n  ],\n};\n\nexport default DiceGame;\n","import DiceGame from \"./components/main\";\nimport \"@celo-tools/use-contractkit/lib/styles.css\";\n\nfunction App() {\n  return (\n      <DiceGame />\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n \nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\n"],"sourceRoot":""}